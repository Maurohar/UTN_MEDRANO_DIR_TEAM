import { useState } from "react";
import Web3 from "web3";
import { CONTRACT_ABI } from "../abi/ContractABI.js";

const CONTRACT_ADDRESS = import.meta.env.PUBLIC_CONTRACT_ADDRESS;

declare global {
  interface Window {
    ethereum?: {
      request?: (...args: any[]) => Promise<any>;
      isMetaMask?: boolean;
    };
  }
}

export default function RegisterForm() {
  const [universidad, setUniversidad] = useState("");
  const [nombreAlumno, setNombreAlumno] = useState("");
  const [dniAlumno, setDniAlumno] = useState("");
  const [matriculaAlumno, setMatriculaAlumno] = useState("");
  const [txHash, setTxHash] = useState("");
  const [status, setStatus] = useState("");

  interface Alumno {
    nombre: string;
    dni: string;
    matricula: string;
  }

  // üîπ FUNCION: Obtener datos de alumno desde hash de transacci√≥n
  async function getTitleByTxHash(txHash: string) {
    console.log("üîπ getTitleByTxHash llamada con txHash:", txHash);
    try {
      const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"));
      console.log("üîπ Conexi√≥n Web3 creada");

      const receipt = await web3.eth.getTransactionReceipt(txHash);
      console.log("üîπ Receipt obtenido:", receipt);

      if (!receipt) {
        setStatus("‚ùå Transacci√≥n a√∫n no minada");
        console.log("‚ùå Receipt undefined");
        return;
      }

      if (!receipt.logs || receipt.logs.length === 0) {
        setStatus("‚ö†Ô∏è No hay logs en esta transacci√≥n");
        console.log("‚ö†Ô∏è Receipt sin logs");
        return;
      }

      const log = receipt.logs[0];
      console.log("üîπ Primer log del receipt:", log);

      const decoded = web3.eth.abi.decodeLog(
        [
          { type: "string", name: "matricula", indexed: false },
          { type: "string", name: "nombre", indexed: false },
          { type: "string", name: "dni", indexed: false },
        ],
        log.data!,
        log.topics!
      );

      console.log("üîπ Evento decodificado:", decoded);

      setStatus(`‚úÖ Alumno: ${decoded.nombre}, DNI: ${decoded.dni}, Matr√≠cula: ${decoded.matricula}`);
    } catch (err) {
      console.error("‚ùå Error en getTitleByTxHash:", err);
      setStatus("‚ùå Error buscando transacci√≥n");
    }
  }

  // üîπ FUNCION: Registrar alumno en blockchain
  async function registerTitle() {
    console.log("üîπ registerTitle llamada");
    if (!universidad || !nombreAlumno || !dniAlumno || !matriculaAlumno) {
      setStatus("‚ùå Faltan datos");
      console.log("‚ùå Datos incompletos:", { universidad, nombreAlumno, dniAlumno, matriculaAlumno });
      return;
    }

    try {
      if (!window.ethereum) {
        setStatus("‚ùå Necesitas MetaMask para registrar t√≠tulos");
        console.log("‚ùå MetaMask no detectado");
        return;
      }

      const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"));
      console.log("üîπ Conexi√≥n Web3 creada");

      const contract = new web3.eth.Contract(CONTRACT_ABI as any, CONTRACT_ADDRESS);
      console.log("üîπ Contrato instanciado:", contract.options.address);

      const accounts = await window.ethereum.request!({ method: "eth_requestAccounts" });
      const from = accounts[0];
      console.log("üîπ Cuenta Ethereum seleccionada:", from);

      const tx = await contract.methods
        .registrarAlumno(nombreAlumno, dniAlumno, matriculaAlumno)
        .send({ from });

      console.log("üîπ Transacci√≥n enviada:", tx);

      setStatus(`‚úÖ T√≠tulo registrado! TX: ${tx.transactionHash}`);
    } catch (err: any) {
      console.error("‚ùå Error en registerTitle:", err);
      setStatus("‚ùå Error al registrar en la blockchain");
    }
  }

  // üîπ FUNCION: Obtener datos de alumno desde hash usando evento
  async function getAlumnoByTxHash(txHash: string) {
    console.log("üîπ getAlumnoByTxHash llamada con txHash:", txHash);

    if (!txHash) {
      console.log("‚ùå Debes pasar un hash de transacci√≥n");
      return;
    }

    try {
      const web3 = new Web3(window.ethereum as any);
      console.log("üîπ Conexi√≥n Web3 creada");

      const contract = new web3.eth.Contract(CONTRACT_ABI as any, CONTRACT_ADDRESS);
      console.log("üîπ Contrato instanciado:", contract.options.address);

      const receipt = await web3.eth.getTransactionReceipt(txHash);
      console.log("üîπ Receipt obtenido:", receipt);

      if (!receipt || !receipt.logs || receipt.logs.length === 0) {
        console.log("‚ùå No se encontraron eventos en esta transacci√≥n");
        return;
      }

      const eventAbi = CONTRACT_ABI.find(
        (e) => e.name === "TituloRegistrado" && e.type === "event"
      );
      console.log("üîπ Event ABI encontrado:", eventAbi);

      if (!eventAbi) {
        console.log("‚ùå No se encontr√≥ la definici√≥n del evento TituloRegistrado");
        return;
      }

      const logs = receipt.logs
        .filter(
          (log): log is { data: string; topics: string[]; address: string } =>
            !!log.address && !!log.data && !!log.topics && log.address.toLowerCase() === CONTRACT_ADDRESS.toLowerCase()
        )
        .map((log) => {
          const decoded = web3.eth.abi.decodeLog(eventAbi.inputs, log.data, log.topics.slice(1));
          console.log("üîπ Log decodificado:", decoded);
          return decoded;
        });

      if (logs.length === 0) {
        console.log("‚ùå No se encontr√≥ el evento TituloRegistrado en la transacci√≥n");
        return;
      }

      const alumno = logs[0];
      console.log("üîπ Datos del alumno desde el evento:");
      console.log("Nombre:", alumno.nombre);
      console.log("DNI:", alumno.dni);
      console.log("Matr√≠cula:", alumno.matricula);
    } catch (err: any) {
      console.error("‚ùå Error al obtener los datos del alumno por txHash:", err);
    }
  }

  const containerStyle = {
    display: "flex",
    flexDirection: "column" as const,
    alignItems: "flex-start" as const,
    justifyContent: "center",
    padding: "16px",
    background: "rgba(255,255,255,0.85)",
    borderRadius: "16px",
    boxShadow: "0 10px 25px rgba(0,0,0,0.1)",
    gap: "12px",
    width: "300px",
  };

  const inputStyle = {
    padding: "8px",
    borderRadius: "6px",
    border: "1px solid #ccc",
    width: "100%",
    marginBottom: "12px",
  };

  const buttonStyle = {
    padding: "10px 16px",
    borderRadius: "6px",
    backgroundColor: "#3245ff",
    color: "white",
    border: "none",
    cursor: "pointer",
  };

  return (
    <div style={containerStyle}>
      <input
        type="text"
        placeholder="Entidad Universitaria"
        value={universidad}
        onChange={(e) => setUniversidad(e.target.value)}
        style={inputStyle}
      />
      <input
        type="text"
        placeholder="Nombre completo del alumno"
        value={nombreAlumno}
        onChange={(e) => setNombreAlumno(e.target.value)}
        style={inputStyle}
      />
      <input
        type="text"
        placeholder="DNI del alumno"
        value={dniAlumno}
        onChange={(e) => setDniAlumno(e.target.value)}
        style={inputStyle}
      />
      <input
        type="text"
        placeholder="N√∫mero de matr√≠cula del alumno"
        value={matriculaAlumno}
        onChange={(e) => setMatriculaAlumno(e.target.value)}
        style={inputStyle}
      />

      <button onClick={registerTitle} style={buttonStyle}>
        Enviar T√≠tulo
      </button>

      <p>{status}</p>

      <section>
        <input
          type="text"
          placeholder="Ingrese hash de transacci√≥n"
          value={txHash}
          onChange={(e) => setTxHash(e.target.value)}
          style={inputStyle}
        />
        <button onClick={() => getAlumnoByTxHash(txHash)} style={buttonStyle}>
          Buscar t√≠tulo por hash
        </button>
      </section>
    </div>
  );
}
